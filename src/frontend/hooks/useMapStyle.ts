import * as React from "react";
import MapboxGL from "@react-native-mapbox-gl/maps";
import AsyncStorage from "@react-native-async-storage/async-storage";
import ky from "ky";
import config from "react-native-build-config";

import api from "../api";
import { normalizeStyleURL } from "../lib/mapbox";
import { useExperiments } from "./useExperiments";
import { useNetInfo } from "@react-native-community/netinfo";
import Loading from "../sharedComponents/Loading";

/** Key used to store most recent map id in Async Storage */
const MAP_STYLE_KEY = "@MAPSTYLE";

/** URL used for map style when no custom map and user is online */
const onlineStyleURL = MapboxGL.StyleURL.Outdoors + "?" + Date.now();

/** URL used for map style when user is not online
 * generated by [mapeo-offline-map](https://github.com/digidem/mapeo-offline-map) */
const fallbackStyleURL = "asset://offline-style.json";

type MapActions =
  | { type: "setCustomLegacy" | "setMapServer"; style: string }
  | { type: "setLoading" | "setOnline" | "setFallback" }
  | { type: "setFromAsyncStorage"; state: MapStyleState };

export type MapStyleType =
  | "customLegacy"
  | "online"
  | "fallback"
  | "mapServer"
  | "loading";

type MapStyleState = {
  mapStyle: MapStyleType;
  mapStyleURL: string | null;
};

function mapStyleReducer(
  state: MapStyleState,
  action: MapActions
): MapStyleState {
  switch (action.type) {
    case "setCustomLegacy":
      return {
        mapStyle: "customLegacy",
        mapStyleURL: action.style,
      };
    case "setOnline":
      return {
        mapStyle: "online",
        mapStyleURL: onlineStyleURL,
      };
    case "setFallback":
      return {
        mapStyle: "fallback",
        mapStyleURL: fallbackStyleURL,
      };
    case "setMapServer":
      return {
        mapStyle: "mapServer",
        mapStyleURL: action.style,
      };
    case "setFromAsyncStorage":
      return action.state;
    default:
      return {
        mapStyle: "loading",
        mapStyleURL: null,
      };
  }
}

export function useMapStyle(styleId: string = "default") {
  const [state, dispatch] = React.useReducer(mapStyleReducer, {
    mapStyle: "loading",
    mapStyleURL: null,
  });

  const { isInternetReachable } = useNetInfo();

  // stores the map style in Async Storage anytime map style changes (except for loading state)
  React.useEffect(() => {
    if (state.mapStyle !== "loading") setAsyncMapStyle(state);
  }, [state]);

  React.useEffect(() => {}, []);

  function setAsyncMapStyle(mapStyleState: MapStyleState) {
    AsyncStorage.setItem(MAP_STYLE_KEY, JSON.stringify(mapStyleState));
  }

  /**
   * Will check for custom offline maps (not served through map server)
   * and set it as background map. If there are no offline maps, will set online map as background
   * map. If user is not online, will set fallback map as background map.
   */
  function turnOffMapServer() {
    dispatch({ type: "setLoading" });
    ky.get(normalizeStyleURL(onlineStyleURL, config.mapboxAccessToken))
      .json()
      .then(() => api.getMapStyleUrl(styleId))
      .then(style => dispatch({ type: "setCustomLegacy", style: style }))
      .catch(() => {
        if (!!isInternetReachable) {
          dispatch({ type: "setOnline" });
          return;
        }
        dispatch({ type: "setFallback" });
      });
  }

  function setMapServerStyleURL(styleId?: string) {
    if (!styleId) {
      AsyncStorage.getItem(MAP_STYLE_KEY)
        .then(storedStyleId => {
          if (!storedStyleId) {
            dispatch({ type: "setMapServer", style: onlineStyleURL });
            return;
          }

          dispatch({
            type: "setMapServer",
            style: api.getMapStyleUrl(storedStyleId),
          });
        })
        .catch(() =>
          dispatch({ type: "setMapServer", style: fallbackStyleURL })
        );

      return;
    }
    dispatch({ type: "setMapServer", style: api.getMapStyleUrl(styleId) });
  }

  return [state, { setMapServerStyleURL, turnOffMapServer }] as const;
}
