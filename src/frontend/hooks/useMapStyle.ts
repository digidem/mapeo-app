import * as React from "react";
import MapboxGL from "@react-native-mapbox-gl/maps";
import AsyncStorage from "@react-native-async-storage/async-storage";

import api from "../api";
import { useNetInfo } from "@react-native-community/netinfo";
import ky from "ky";
import { normalizeStyleURL } from "../lib/mapbox";
import config from "../../config.json";
import { useExperiments } from "./useExperiments";

/** Key used to store most recent map id in Async Storage */
const MAP_STYLE_KEY = "@MAPSTYLE";

/** URL used for map style when no custom map and user is online */
const onlineStyleURL = MapboxGL.StyleURL.Outdoors + "?" + Date.now();

/** URL used for map style when user is not online
 * generated by [mapeo-offline-map](https://github.com/digidem/mapeo-offline-map) */
const fallbackStyleURL = "asset://offline-style.json";

type LegacyMapActions =
  | { action: "setLoading" }
  | { action: "setCustom"; styleUrl: string }
  | { action: "setOnline" }
  | { action: "setFallback" };

type LegacyMapTypes =
  | { type: "custom" | "online" | "fallback"; styleUrl: string }
  | { type: "loading"; styleUrl: null };

export type MapTypes =
  | "loading"
  | "mapServer"
  | "custom"
  | "online"
  | "fallback";

function legacyMapTypeReducer(
  state: LegacyMapTypes,
  action: LegacyMapActions
): LegacyMapTypes {
  switch (action.action) {
    case "setCustom":
      return { type: "custom", styleUrl: action.styleUrl };
    case "setOnline":
      return { type: "online", styleUrl: onlineStyleURL };
    case "setFallback":
      return { type: "fallback", styleUrl: fallbackStyleURL };
    default:
      return { type: "loading", styleUrl: null };
  }
}
function useLegacyStyle(
  isOnline: boolean,
  styleId: string = "default"
): {
  styleUrl: string | null;
  styleType: MapTypes;
  setStyleId: (id: string) => void;
} {
  const [state, dispatch] = React.useReducer(legacyMapTypeReducer, {
    type: "loading",
    styleUrl: null,
  });

  React.useEffect(() => {
    let didCancel = false;

    // checks if custom maps are available
    // If not, checks if online maps are available
    // If not, sets to fallback maps
    api
      .getMapStyle(styleId)
      .then(
        style => didCancel || dispatch({ action: "setCustom", styleUrl: style })
      )
      .catch(() =>
        ky
          .get(normalizeStyleURL(onlineStyleURL, config.mapboxAccessToken))
          .json()
          .then(() => didCancel || dispatch({ action: "setOnline" }))
          .catch(() => didCancel || dispatch({ action: "setFallback" }))
      );

    return () => {
      didCancel = true;
    };
  }, []);

  React.useEffect(() => {
    if (isOnline && state.type === "fallback") {
      dispatch({ action: "setOnline" });
    }
  }, [isOnline, state.type]);

  return {
    styleUrl: state.styleUrl,
    styleType: state.type,
    setStyleId: (id: string) => {
      throw new Error(
        "setStyleId is not supported unless map server is turned on"
      );
    },
  };
}

function useMapServerStyle(): {
  styleUrl: string | null;
  styleType: MapTypes;
  setStyleId: (id: string) => void;
} {
  const [id, setId] = React.useState<string | null>(null);

  React.useEffect(() => {
    AsyncStorage.getItem(MAP_STYLE_KEY).then(id => {
      if (id) setId(id);
    });
  }, []);

  const setIdWithAsync = React.useCallback(
    (id: string) => {
      setId(id);
      AsyncStorage.setItem(MAP_STYLE_KEY, id);
    },
    [setId]
  );

  return React.useMemo(
    () => ({
      styleUrl: id ? api.getMapStyleUrl(id) : null,
      styleType: "mapServer",
      setStyleId: setIdWithAsync,
    }),
    [id, setId]
  );
}

export function useMapStyle(
  styleId: string = "default"
): {
  styleUrl: string | null;
  styleType: MapTypes;
  setStyleId: (id: string) => void;
} {
  const [{ backgroundMaps }] = useExperiments();

  const { isInternetReachable } = useNetInfo();

  const legacyStyleInfo = useLegacyStyle(!!isInternetReachable, styleId);
  const mapServerInfo = useMapServerStyle();

  return backgroundMaps ? mapServerInfo : legacyStyleInfo;
}
