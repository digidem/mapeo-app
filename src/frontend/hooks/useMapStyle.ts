import * as React from "react";
import MapboxGL from "@react-native-mapbox-gl/maps";
import AsyncStorage from "@react-native-async-storage/async-storage";

import api from "../api";
import { useNetInfo } from "@react-native-community/netinfo";
import ky from "ky";
import { normalizeStyleURL } from "../lib/mapbox";
import config from "../../config.json";
import SettingsContext from "../context/SettingsContext";
import { useExperiments } from "./useExperiments";

/** Key used to store most recent map id in Async Storage */
const MAP_STYLE_KEY = "@MAPSTYLE";

/** URL used for map style when no custom map and user is online */
const onlineStyleURL = MapboxGL.StyleURL.Outdoors + "?" + Date.now();

/** URL used for map style when user is not online
 * generated by [mapeo-offline-map](https://github.com/digidem/mapeo-offline-map) */
const fallbackStyleURL = "asset://offline-style.json";

export type MapTileSource =
  | { type: "mapServer"; styleId: string; styleUrl: string }
  | { type: "legacy"; styleUrl: string; legacyMapType: LegacyMapType }
  | { type: "loading" };

type LegacyMapType = "custom" | "online" | "fallback";

type MapTileSourceActions =
  | { action: "setLoading" }
  | { action: "setMapServer"; styleId: string }
  | { action: "setLegacy"; legacyMapType: LegacyMapType; url: string };

function mapStyleReducer(
  state: MapTileSource,
  action: MapTileSourceActions
): MapTileSource {
  switch (action.action) {
    case "setLoading":
      return { type: "loading" };
    case "setMapServer":
      if (state.type === "mapServer" && state.styleId !== action.styleId) {
        AsyncStorage.setItem(MAP_STYLE_KEY, action.styleId);
      }
      return {
        type: "mapServer",
        styleId: action.styleId,
        styleUrl: api.getMapStyleUrl(action.styleId),
      };
    case "setLegacy":
      if (state.type !== "legacy") AsyncStorage.setItem(MAP_STYLE_KEY, "");
      return {
        type: "legacy",
        styleUrl: action.url,
        legacyMapType: action.legacyMapType,
      };
  }
}

function useLegacy(isOnline: boolean, styleId: string = "default") {
  const [customStyleStatus, setCustomStyleStatus] = React.useState("unknown");
  const [onlineStyleStatus, setOnlineStyleStatus] = React.useState("unknown");

  const cachedStyleUrl = React.useRef<string | undefined>(undefined);

  React.useEffect(() => {
    let didCancel = false;

    if (customStyleStatus !== "unknown") return;

    async function getMap() {
      try {
        await api.getMapStyle(styleId);
        setCustomStyleStatus("available");
      } catch (err) {
        setCustomStyleStatus("unavailable");
      }
    }

    if (!didCancel) {
      getMap();
    }

    return () => {
      didCancel = true;
    };
  }, [styleId, customStyleStatus, onlineStyleStatus]);

  React.useEffect(() => {
    setOnlineStyleStatus(isOnline ? "available" : "unavailable");
  }, [isOnline]);

  React.useEffect(() => {
    let didCancel = false;

    if (onlineStyleStatus !== "available") return;

    ky.get(normalizeStyleURL(onlineStyleURL, config.mapboxAccessToken))
      .json()
      .then(() => didCancel || setOnlineStyleStatus("available"))
      .catch(() => didCancel || setOnlineStyleStatus("unavailable"));

    return () => {
      didCancel = true;
    };
  }, [onlineStyleStatus]);

  return React.useMemo(() => {
    let styleUrl = cachedStyleUrl.current;
    let styleType = "loading";

    if (customStyleStatus === "available") {
      styleUrl = cachedStyleUrl.current = api.getMapStyleUrl(styleId);
      styleType = "custom";
    } else if (
      customStyleStatus === "unavailable" &&
      onlineStyleStatus === "available"
    ) {
      styleUrl = cachedStyleUrl.current = onlineStyleURL;
      styleType = "online";
    } else if (
      customStyleStatus === "unavailable" &&
      onlineStyleStatus === "unavailable"
    ) {
      styleUrl = cachedStyleUrl.current = fallbackStyleURL;
      styleType = "fallback";
    }

    return {
      styleUrl,
      styleType,
      setId: () => {
        throw new Error("Cannot set style id for legacy maps");
      },
    };
  }, [customStyleStatus, onlineStyleStatus, styleId]);
}

function useMapServerStyle() {
  const [id, setId] = React.useState<string | null>(null);

  React.useEffect(() => {
    AsyncStorage.getItem(MAP_STYLE_KEY).then(id => {
      if (id) setId(id);
    });
  }, []);

  React.useEffect(() => {
    if (id) AsyncStorage.setItem(MAP_STYLE_KEY, id);
  }, [id]);

  return {
    styleUrl: id ? api.getMapStyleUrl(id) : null,
    styleType: "map-server",
    setStyleId: setId,
  };
}

function useMapStyleV2(styleId?: string) {
  const [{ backgroundMaps }] = useExperiments();

  const { isInternetReachable } = useNetInfo();

  const legacyStyleInfo = useLegacy(!!isInternetReachable, styleId);
  const mapServerInfo = useMapServerStyle();

  return backgroundMaps ? mapServerInfo : legacyStyleInfo;
}

export function useMapStyle(styleId: string = "default") {
  const [mapTileSource, dispatch] = React.useReducer(mapStyleReducer, {
    type: "loading",
  });

  const { isInternetReachable } = useNetInfo();

  React.useEffect(() => {
    if (
      mapTileSource.type === "legacy" &&
      mapTileSource.legacyMapType === "fallback" &&
      isInternetReachable
    ) {
      dispatch({
        action: "setLegacy",
        legacyMapType: "online",
        url: onlineStyleURL,
      });
    }
  }, [isInternetReachable]);

  React.useEffect(() => {
    AsyncStorage.getItem(MAP_STYLE_KEY).then(styleId => {
      if (!styleId) setLegacyMapsOn();
      else dispatch({ action: "setMapServer", styleId });
    });
  }, []);

  function setMapTileSource(
    mapTileSource: Omit<MapTileSource["type"], "loading">
  ) {
    mapTileSource === "mapServer"
      ? dispatch({ action: "setMapServer", styleId: styleId })
      : setLegacyMapsOn();
  }

  /**set `currentMapTileSource` to `legacy` */
  const setLegacyMapsOn = React.useCallback(() => {
    dispatch({ action: "setLoading" });
    api
      .getMapStyle(styleId)
      .then(style =>
        dispatch({ action: "setLegacy", legacyMapType: "custom", url: style })
      )
      .catch(() =>
        ky
          .get(normalizeStyleURL(onlineStyleURL, config.mapboxAccessToken))
          .json()
          .then(() =>
            dispatch({
              action: "setLegacy",
              legacyMapType: "online",
              url: onlineStyleURL,
            })
          )
          .catch(() =>
            dispatch({
              action: "setLegacy",
              legacyMapType: "fallback",
              url: fallbackStyleURL,
            })
          )
      );
  }, [styleId, onlineStyleURL, fallbackStyleURL, isInternetReachable]);

  /** Will set `styleId` and `styleUrl` of `mapTileSource` ONLY if `mapTileSource.type === MapServer` */
  const setMapServerStyleId = React.useCallback((customStyleId: string) => {
    if (mapTileSource.type !== "mapServer") {
      throw new Error(
        'SetMapServerStyleId can only be called when mapTileSource.type is "mapServer". SetMapTileSource("mapServer") first.'
      );
    }
    dispatch({ action: "setMapServer", styleId: customStyleId });
  }, []);

  return [mapTileSource, { setMapTileSource, setMapServerStyleId }] as const;
}
