apply plugin: "com.android.application"
apply plugin: "com.facebook.react"

import com.android.build.OutputFile
import net.swiftzer.semver.SemVer

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */

react = [
    entryFile: "index.js",
    cliPath: new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/cli.js",
    composeSourceMapsPath: new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/scripts/compose-source-maps.js",
    inputExcludes: ["android/**", "ios/**", ".gitsecret/**", "flow-typed/**"],
    // We distribute the QA debug build for testing, so that we get debug logs.
    // This setting bundles the JS into the APK, so you don't need the metro
    // bundler running in order to run the Debug QA build
    bundleInUniversal: true,
    bundleInIntel: true,
    bundleInRelease: true,
    enableHermes: false, // clean and rebuild if changing
    // Disable dev logging in the Universal build (only disabled in release
    // build type by default)
    devDisabledInAppUniversal: true,
    devDisabledInQaUniversal: true,
    devDisabledInIccaUniversal: true,
    devDisabledInAppIntel: true,
    devDisabledInQaIntel: true,
    devDisabledInIccaIntel: true
    
    
]

project.ext.vectoricons = [
    iconFontNames: [ 'MaterialIcons.ttf', 'Octicons.ttf', 'MaterialCommunityIcons.ttf', 'FontAwesome.ttf' ]
]

apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"
apply from: new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim(), "../react.gradle")

// Add bugsnag plugin for source map and symbol uploads
apply plugin: 'com.bugsnag.android.gradle'

/**
* Set this to true to create four separate APKs instead of one,
 * one for each native architecture. This is useful if you don't
 * use App Bundles (https://developer.android.com/guide/app-bundle/)
 * and want to have separate APKs to upload to the Play Store.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc-intl:+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);

/**
 * Private function to get the list of Native Architectures you want to build.
 * This reads the value from reactNativeArchitectures in your gradle.properties
 * file and works together with the --active-arch-only flag of react-native run-android.
 */
def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86_64", "arm64-v8a"]
}

def getenv(key) {
    return System.getenv(key) ?: project.env.get(key)
}

File releaseKeystore = file("mapeo-release-key.keystore")
def myVersionCode = (getenv("ANDROID_VERSION_CODE") ?: 1) as int
def myVersionName = getenv("ANDROID_VERSION_NAME") ?: getenv("npm_package_version") ?: "0.0.0"
println("Version name")
println(myVersionName)

def getDefaultBugsnagReleaseStage(version) {
    // If changing this, also change in src/backend/app.js
    SemVer parsed = SemVer.parse(version)
    def preRelease = parsed.preRelease
    if (preRelease == null) {
        return 'production'
    } else if (preRelease.toLowerCase().startsWith("rc")) {
        return 'rc'
    }
    return 'internal'
}

def paths = [
    new File("app/build/jni/libs")
]

bugsnag {
    sharedObjectPaths = paths
    uploadReactNativeMappings = true // enable upload of React Native source maps
    // Set variant metadata for ICCA variant
    // If changing this, also change in src/backend/app.js
    variantFilter { variant ->
        def name = variant.name.toLowerCase()
        def map = new HashMap()
        if (name.contains("icca")) {
            map.put("variant", "icca")
        } else {
            map.put("variant", "mapeo")
        }
        metadata = map
    }
    // Disable bugsnag source uploading for locally built versions (on CI version code is set to the build number)
    if (myVersionCode == 1) {
        enabled = false
    }
}

String shouldRebuildNativeModules = System.getenv('NODEJS_MOBILE_BUILD_NATIVE_MODULES');

// This is from the nodejs-mobile build.gradle, but it is only set if
// NODEJS_MOBILE_BUILD_NATIVE_MODULES is "1". When we cache the native modules
// build files we set NODEJS_MOBILE_BUILD_NATIVE_MODULES to "0", but we still
// want to include this folder in the build
if ("0".equals(shouldRebuildNativeModules)) {
    // We are not rebuilding native modules, but we still want to include the
    // cached native module build files in the build
    project.android.sourceSets.main.assets.srcDirs+="${rootProject.buildDir}/nodejs-native-assets/"
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    ndkVersion rootProject.ext.ndkVersion
    namespace "com.mapeo"

    dexOptions {
        javaMaxHeapSize "4g"
    }

    defaultConfig {
        applicationId "com.mapeo"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode myVersionCode
        versionName myVersionName
        archivesBaseName = "mapeo"

        // Detox integration
        testBuildType System.getProperty('testBuildType', 'debug')  // This will later be used to control the test apk build type
        testInstrumentationRunner 'com.mapeo.DetoxTestAppJUnitRunner'

        // Bugsnag integration
        manifestPlaceholders = [bugsnagReleaseStage: getDefaultBugsnagReleaseStage(myVersionName)]
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            // nodejs-mobile v16.17.X does not support x86: https://github.com/nodejs-mobile/nodejs-mobile/blob/main/doc_mobile/CHANGELOG.md#2023-01-26-version-16170
            include (*reactNativeArchitectures())
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            // Fallback to debug signing keystore if release keystore does not exist
            if (releaseKeystore.exists()) {
                storeFile releaseKeystore
                storePassword getenv("MAPEO_KEYSTORE_PASSWORD")
                keyAlias getenv("MAPEO_KEYSTORE_ALIAS")
                keyPassword getenv("MAPEO_PRIVATE_KEY_PASSWORD")
            } else {
                storeFile file('debug.keystore')
                storePassword 'android'
                keyAlias 'androiddebugkey'
                keyPassword 'android'
            }
        }
    }
    flavorDimensions "version"
    productFlavors {
        qa {
            dimension "version"
            applicationIdSuffix ".qa"
        }
        app {
            dimension "version"
        }
        icca {
            dimension "version"
            applicationIdSuffix ".icca"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a"
            }
        }
        universal {
            initWith release
            // For depedencies, fallback to using this build type name
            matchingFallbacks = ['release']
            ndk {
                // nodejs-mobile v16.17.X does not support x86: https://github.com/nodejs-mobile/nodejs-mobile/blob/main/doc_mobile/CHANGELOG.md#2023-01-26-version-16170
                abiFilters "armeabi-v7a", "arm64-v8a", "x86_64" // "x86"
            }
        }
        // Build type for intel devices (chromebooks and rare phones)
        intel {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
            matchingFallbacks = ['release']
            ndk {
                // nodejs-mobile v16.17.X does not support x86: https://github.com/nodejs-mobile/nodejs-mobile/blob/main/doc_mobile/CHANGELOG.md#2023-01-26-version-16170
                abiFilters "x86_64" // "x86"
            }
        }
        debug {
            // We need to set this to null so that we can override it for variants
            signingConfig signingConfigs.debug
            applicationIdSuffix ".debug"
            ndk {
                // nodejs-mobile v16.17.X does not support x86: https://github.com/nodejs-mobile/nodejs-mobile/blob/main/doc_mobile/CHANGELOG.md#2023-01-26-version-16170
                abiFilters "armeabi-v7a", "arm64-v8a", "x86_64" // "x86"
            }
            manifestPlaceholders = [bugsnagReleaseStage: "development"]
        }
    }

    variantFilter { variant ->
        def names = variant.flavors*.name
        // For QA variants, skip universal build
        if (names.contains("qa") && variant.buildType.name == "universal") {
            setIgnore(true)
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // The special intel (e.g. x86, x86_64) build type needs to have a different
            // version code to the release build type if they are to be
            // published alongside each other on the Play Store
            if (variant.buildType.name == "intel") {
                output.versionCodeOverride = 1048576 + defaultConfig.versionCode
            }
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            // Example: versionCode 1 will generate 1001 for armeabi-v7a, 1002 for x86, etc.
            def versionCodes = ["armeabi-v7a":1, "x86":2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }

    packagingOptions {
        // Fix gradle build warnings (NDK does not support mips any more)
        doNotStrip '*/mips/*.so'
        doNotStrip '*/mips64/*.so'
        // Fix for detox
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")
    
    def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true";
    def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true";
    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true";

    // If your app supports Android versions before Ice Cream Sandwich (API level 14)
    // All fresco packages should use the same version
    if (isGifEnabled || isWebpEnabled) {
        implementation 'com.facebook.fresco:fresco:2.0.0'
        implementation 'com.facebook.fresco:imagepipeline-okhttp3:2.0.0'
    }

    if (isGifEnabled) {
        // For animated gif support
        implementation 'com.facebook.fresco:animated-gif:2.0.0'
    }

    if (isWebpEnabled) {
        // For webp support
        implementation 'com.facebook.fresco:webpsupport:2.0.0'
        if (isWebpAnimatedEnabled) {
            // Animated webp support
            implementation 'com.facebook.fresco:animated-webp:2.0.0'
        }
    }

    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"
    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.fbjni'
    }
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

    // Detox
    androidTestImplementation 'com.wix:detox:+'
    androidTestImplementation 'com.linkedin.testbutler:test-butler-library:2.2.1'
}

apply from: new File(["node", "--print", "require.resolve('@react-native-community/cli-platform-android/package.json')"].execute(null, rootDir).text.trim(), "../native_modules.gradle");
applyNativeModulesAppBuildGradle(project)