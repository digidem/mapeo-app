import * as React from "react";
import MapboxGL from "@react-native-mapbox-gl/maps";
import AsyncStorage from "@react-native-async-storage/async-storage";
import ky from "ky";
import config from "react-native-build-config";

import api from "../api";
import { normalizeStyleURL } from "../lib/mapbox";
import { useNetInfo } from "@react-native-community/netinfo";

/** Key used to store most recent map id in Async Storage */
const MAP_STYLE_KEY = "@MAPSTYLE";

/** URL used for map style when no custom map and user is online */
const onlineStyleURL = MapboxGL.StyleURL.Outdoors + "?" + Date.now();

/** URL used for map style when user is not online
 * generated by [mapeo-offline-map](https://github.com/digidem/mapeo-offline-map) */
const fallbackStyleURL = "asset://offline-style.json";

type MapStyleSource =
  | { type: "mapServer"; styleId: string; styleUrl: string }
  | { type: "legacy"; styleUrl: string; legacyMapType: LegacyMapType }
  | { type: "loading" };

type LegacyMapType = "custom" | "online" | "fallback";

type MapStyleSourceActions =
  | { action: "setLoading" }
  | { action: "setMapServer"; styleId: string }
  | { action: "setLegacy"; legacyMapType: LegacyMapType; url: string };

function mapStyleReducer(
  state: MapStyleSource,
  action: MapStyleSourceActions
): MapStyleSource {
  switch (action.action) {
    case "setLoading":
      return { type: "loading" };
    case "setMapServer":
      if (state.type === "mapServer" && state.styleId !== action.styleId) {
        AsyncStorage.setItem(MAP_STYLE_KEY, action.styleId);
      }
      return {
        type: "mapServer",
        styleId: action.styleId,
        styleUrl: api.getMapStyleUrl(action.styleId),
      };
    case "setLegacy":
      if (state.type !== "legacy") AsyncStorage.setItem(MAP_STYLE_KEY, "");
      return {
        type: "legacy",
        styleUrl: action.url,
        legacyMapType: action.legacyMapType,
      };
  }
}

export function useMapStyle(styleId: string = "default") {
  const [state, dispatch] = React.useReducer(mapStyleReducer, {
    type: "loading",
  });

  const { isInternetReachable } = useNetInfo();

  React.useEffect(() => {
    if (
      state.type === "legacy" &&
      state.legacyMapType === "online" &&
      !isInternetReachable
    ) {
      dispatch({
        action: "setLegacy",
        legacyMapType: "fallback",
        url: fallbackStyleURL,
      });
    }

    if (
      state.type === "legacy" &&
      state.legacyMapType === "fallback" &&
      !!isInternetReachable
    ) {
      dispatch({
        action: "setLegacy",
        legacyMapType: "online",
        url: onlineStyleURL,
      });
    }
  }, [isInternetReachable]);

  React.useEffect(() => {
    AsyncStorage.getItem(MAP_STYLE_KEY).then(styleId => {
      if (!styleId) setLegacyMapsOn();
      else dispatch({ action: "setMapServer", styleId });
    });
  }, []);

  const setLegacyMapsOn = React.useCallback(() => {
    dispatch({ action: "setLoading" });
    ky.get(normalizeStyleURL(onlineStyleURL, config.mapboxAccessToken))
      .json()
      .then(() => api.getMapStyleUrl(styleId))
      .then(style =>
        dispatch({ action: "setLegacy", legacyMapType: "custom", url: style })
      )
      .catch(() =>
        isInternetReachable
          ? dispatch({
              action: "setLegacy",
              legacyMapType: "online",
              url: onlineStyleURL,
            })
          : dispatch({
              action: "setLegacy",
              legacyMapType: "fallback",
              url: fallbackStyleURL,
            })
      );
  }, [
    styleId,
    onlineStyleURL,
    fallbackStyleURL,
    isInternetReachable,
    config.mapboxAccessToken,
  ]);

  const turnOnMapServer = React.useCallback(
    () => dispatch({ action: "setMapServer", styleId: styleId }),
    []
  );

  const setMapServerStyleId = React.useCallback(
    (customStyleId: string) =>
      dispatch({ action: "setMapServer", styleId: customStyleId }),
    []
  );

  return [
    state,
    { setLegacyMapsOn, turnOnMapServer, setMapServerStyleId },
  ] as const;
}
