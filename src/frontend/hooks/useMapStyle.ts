import * as React from "react";
import MapboxGL from "@react-native-mapbox-gl/maps";
import AsyncStorage from "@react-native-async-storage/async-storage";

import api from "../api";
import { useNetInfo } from "@react-native-community/netinfo";
import ky from "ky";
import { normalizeStyleURL } from "../lib/mapbox";
import config from "../../config.json";

/** Key used to store most recent map id in Async Storage */
const MAP_STYLE_KEY = "@MAPSTYLE";

/** URL used for map style when no custom map and user is online */
const onlineStyleURL = MapboxGL.StyleURL.Outdoors + "?" + Date.now();

/** URL used for map style when user is not online
 * generated by [mapeo-offline-map](https://github.com/digidem/mapeo-offline-map) */
const fallbackStyleURL = "asset://offline-style.json";

export type MapTileSource =
  | { type: "mapServer"; styleId: string; styleUrl: string }
  | { type: "legacy"; styleUrl: string; legacyMapType: LegacyMapType }
  | { type: "loading" };

type LegacyMapType = "custom" | "online" | "fallback";

type MapTileSourceActions =
  | { action: "setLoading" }
  | { action: "setMapServer"; styleId: string }
  | { action: "setLegacy"; legacyMapType: LegacyMapType; url: string };

function mapStyleReducer(
  state: MapTileSource,
  action: MapTileSourceActions
): MapTileSource {
  switch (action.action) {
    case "setLoading":
      return { type: "loading" };
    case "setMapServer":
      if (state.type === "mapServer" && state.styleId !== action.styleId) {
        AsyncStorage.setItem(MAP_STYLE_KEY, action.styleId);
      }
      return {
        type: "mapServer",
        styleId: action.styleId,
        styleUrl: api.getMapStyleUrl(action.styleId),
      };
    case "setLegacy":
      if (state.type !== "legacy") AsyncStorage.setItem(MAP_STYLE_KEY, "");
      return {
        type: "legacy",
        styleUrl: action.url,
        legacyMapType: action.legacyMapType,
      };
  }
}

export function useMapStyle(styleId: string = "default") {
  const [mapTileSource, dispatch] = React.useReducer(mapStyleReducer, {
    type: "loading",
  });

  const { isInternetReachable } = useNetInfo();

  React.useEffect(() => {
    if (
      mapTileSource.type === "legacy" &&
      mapTileSource.legacyMapType === "fallback" &&
      isInternetReachable
    ) {
      dispatch({
        action: "setLegacy",
        legacyMapType: "online",
        url: onlineStyleURL,
      });
    }
  }, [isInternetReachable]);

  React.useEffect(() => {
    AsyncStorage.getItem(MAP_STYLE_KEY).then(styleId => {
      if (!styleId) setLegacyMapsOn();
      else dispatch({ action: "setMapServer", styleId });
    });
  }, []);

  function setMapTileSource(
    mapTileSource: Omit<MapTileSource["type"], "loading">
  ) {
    mapTileSource === "mapServer"
      ? dispatch({ action: "setMapServer", styleId: styleId })
      : setLegacyMapsOn();
  }

  /**set `currentMapTileSource` to `legacy` */
  const setLegacyMapsOn = React.useCallback(() => {
    dispatch({ action: "setLoading" });
    api
      .getMapStyle(styleId)
      .then(style =>
        dispatch({ action: "setLegacy", legacyMapType: "custom", url: style })
      )
      .catch(() =>
        ky
          .get(normalizeStyleURL(onlineStyleURL, config.mapboxAccessToken))
          .json()
          .then(() =>
            dispatch({
              action: "setLegacy",
              legacyMapType: "online",
              url: onlineStyleURL,
            })
          )
          .catch(() =>
            dispatch({
              action: "setLegacy",
              legacyMapType: "fallback",
              url: fallbackStyleURL,
            })
          )
      );
  }, [styleId, onlineStyleURL, fallbackStyleURL, isInternetReachable]);

  /** Will set `styleId` and `styleUrl` of `mapTileSource` ONLY if `mapTileSource.type === MapServer` */
  const setMapServerStyleId = React.useCallback((customStyleId: string) => {
    if (mapTileSource.type !== "mapServer") {
      throw new Error(
        'SetMapServerStyleId can only be called when mapTileSource.type is "mapServer". SetMapTileSource("mapServer") first.'
      );
    }
    dispatch({ action: "setMapServer", styleId: customStyleId });
  }, []);

  return [mapTileSource, { setMapTileSource, setMapServerStyleId }] as const;
}
