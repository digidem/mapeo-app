import * as React from "react";
import MapboxGL from "@react-native-mapbox-gl/maps";
import AsyncStorage from "@react-native-async-storage/async-storage";
import ky from "ky";
import config from "react-native-build-config";

import api from "../api";
import useWifiStatus from "./useWifiStatus";
import { normalizeStyleURL } from "../lib/mapbox";
import { useExperiments } from "./useExperiments";

/** Key used to store most recent map id in Async Storage */
const MAP_STYLE_KEY = "@MAPSTYLE";

/** URL used for map style when no custom map and user is online */
const onlineStyleURL = MapboxGL.StyleURL.Outdoors + "?" + Date.now();

/** URL used for map style when user is not online
 * generated by [mapeo-offline-map](https://github.com/digidem/mapeo-offline-map) */
const fallbackStyleURL = "asset://offline-style.json";

type MapActions =
  | { type: "setCustomLegacy" | "setMapServer"; style: string }
  | { type: "setLoading" | "setOnline" | "setFallback" };

export type MapStyleType =
  | "customLegacy"
  | "online"
  | "fallback"
  | "mapServer"
  | "loading";

type MapStyleState = {
  mapStyle: MapStyleType;
  mapStyleURL: string | null;
};

function mapStyleReducer(
  state: MapStyleState,
  action: MapActions
): MapStyleState {
  switch (action.type) {
    case "setCustomLegacy":
      return {
        mapStyle: "customLegacy",
        mapStyleURL: action.style,
      };
    case "setOnline":
      return {
        mapStyle: "online",
        mapStyleURL: onlineStyleURL,
      };
    case "setFallback":
      return {
        mapStyle: "fallback",
        mapStyleURL: fallbackStyleURL,
      };
    case "setMapServer":
      return {
        mapStyle: "mapServer",
        mapStyleURL: action.style,
      };
    default:
      return {
        mapStyle: "loading",
        mapStyleURL: null,
      };
  }
}

/**
 * @param {string} styleId
 * @returns `[mapStyle, setMapStyle(styleId:string)]` setMapStyle is a function that can be used to set the map style when map server is on
 */
export function useMapStyle(styleId: string = "default") {
  const [state, dispatch] = React.useReducer(mapStyleReducer, {
    mapStyle: "loading",
    mapStyleURL: null,
  });

  const { ssid } = useWifiStatus();

  const [{ backgroundMaps }] = useExperiments();

  React.useEffect(() => {
    if (state.mapStyle === "mapServer" || state.mapStyle === "customLegacy")
      return;

    if (ssid === null && state.mapStyle === "online") {
      dispatch({ type: "setFallback" });
    }
  }, [ssid]);

  React.useEffect(() => {
    if (!backgroundMaps && state.mapStyle === "mapServer") {
      turnOffMapServer(ssid !== null);
    }

    if (backgroundMaps && state.mapStyle !== "mapServer") {
      turnOnMapServer();
    }
  }, [backgroundMaps, ssid, turnOffMapServer, turnOnMapServer]);

  /** Will turn on experimental map server */
  function turnOnMapServer() {
    dispatch({ type: "setLoading" });
    AsyncStorage.getItem(MAP_STYLE_KEY)
      .then(style => {
        if (style === null) {
          dispatch({ type: "setMapServer", style: fallbackStyleURL });
          return;
        }

        dispatch({ type: "setMapServer", style: style });
      })
      .catch(() => dispatch({ type: "setMapServer", style: fallbackStyleURL }));
  }

  /**
   * Will check for custom offline maps (not served through map server)
   * and set it as background map. If there are no offline maps, will set online map as background
   * map. If user is not online, will set fallback map as background map.
   */
  function turnOffMapServer(isOnline: boolean) {
    dispatch({ type: "setLoading" });
    ky.get(normalizeStyleURL(onlineStyleURL, config.mapboxAccessToken))
      .json()
      .then(() => api.getMapStyleUrl(styleId))
      .then(style => dispatch({ type: "setCustomLegacy", style: style }))
      .catch(() => {
        if (isOnline) {
          dispatch({ type: "setOnline" });
          return;
        }
        dispatch({ type: "setFallback" });
      });
  }

  function setMapServerStyleURL(styleId: string) {
    if (state.mapStyle === "mapServer") {
      throw new Error(
        "Map server must be turned on before setting a map server style. Map server can be turned on using useExperiments() hook."
      );
    }

    dispatch({ type: "setMapServer", style: api.getMapStyleUrl(styleId) });
    AsyncStorage.setItem(MAP_STYLE_KEY, styleId);
  }

  return [state, setMapServerStyleURL] as const;
}
