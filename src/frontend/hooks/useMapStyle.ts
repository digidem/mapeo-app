import * as React from "react";
import MapboxGL from "@react-native-mapbox-gl/maps";
import AsyncStorage from "@react-native-async-storage/async-storage";

import api from "../api";
import { useNetInfo } from "@react-native-community/netinfo";
import ky from "ky";
import { normalizeStyleURL } from "../lib/mapbox";
import config from "../../config.json";
import { useExperiments } from "./useExperiments";

import { MapStyleContext, MapTypes } from "../context/MapStyleContext";
import createPersistedState from "./usePersistedState";

/** URL used for map style when no custom map and user is online */
const onlineStyleURL = MapboxGL.StyleURL.Outdoors + "?" + Date.now();

/** URL used for map style when user is not online
 * generated by [mapeo-offline-map](https://github.com/digidem/mapeo-offline-map) */
const fallbackStyleURL = "asset://offline-style.json";

type OnlineState = "unknown" | "online" | "offline";
type LegacyCustomMapState =
  | { state: "unknown" | "unavailable" }
  | { state: "available"; id: string };

function getStyleUrl(
  onlineState: OnlineState,
  customMapState: LegacyCustomMapState
): { styleUrl: string | null; styleType: MapTypes } {
  if (onlineState === "unknown" || customMapState.state === "unknown") {
    return { styleType: "loading", styleUrl: null };
  } else if (customMapState.state === "available") {
    return {
      styleType: "custom",
      styleUrl: api.getMapStyleUrl(customMapState.id),
    };
  } else if (onlineState === "online") {
    return { styleType: "online", styleUrl: onlineStyleURL };
  } else {
    return { styleType: "fallback", styleUrl: fallbackStyleURL };
  }
}

function useLegacyStyle(
  styleId: string = "default"
): {
  styleUrl: string | null;
  styleType: MapTypes;
  setStyleId: (id: string) => void;
} {
  const [onlineState, setOnlineState] = React.useState<OnlineState>("unknown");
  const [customMapState, setCustomMapState] = React.useState<
    LegacyCustomMapState
  >({ state: "unknown" });

  const { isInternetReachable } = useNetInfo();

  React.useEffect(() => {
    let didCancel = false;

    if (customMapState.state !== "unknown") return;

    api
      .getMapStyle(styleId)
      .then(
        () =>
          didCancel || setCustomMapState({ state: "available", id: styleId })
      )
      .catch(() => didCancel || setCustomMapState({ state: "unavailable" }));

    return () => {
      didCancel = true;
    };
  }, [customMapState]);

  React.useEffect(() => {
    let didCancel = false;

    if (onlineState !== "unknown") return;

    ky.get(normalizeStyleURL(onlineStyleURL, config.mapboxAccessToken))
      .json()
      .then(() => didCancel || setOnlineState("online"))
      .catch(() => didCancel || setOnlineState("offline"));

    return () => {
      didCancel = true;
    };
  }, [onlineState]);

  return React.useMemo(
    () => ({
      ...getStyleUrl(onlineState, customMapState),
      setStyleId: (id: string) => {
        throw new Error("Cannot set styleId on legacy map");
      },
    }),
    [onlineState, customMapState]
  );
}

function useMapServerStyle(): {
  styleUrl: string | null;
  styleType: MapTypes;
  setStyleId: (id: string) => void;
} {
  const [id, setId] = React.useContext(MapStyleContext);

  return React.useMemo(
    () => ({
      styleUrl: id ? api.getMapStyleUrl(id) : null,
      styleType: "mapServer",
      setStyleId: setId,
    }),
    [id, setId]
  );
}

export function useMapStyle(
  styleId: string = "default"
): {
  styleUrl: string | null;
  styleType: MapTypes;
  setStyleId: (id: string) => void;
} {
  const [{ backgroundMaps }] = useExperiments();

  const legacyStyleInfo = useLegacyStyle(styleId);
  const mapServerInfo = useMapServerStyle();

  return backgroundMaps ? mapServerInfo : legacyStyleInfo;
}
