diff --git a/node_modules/nodejs-mobile-react-native/android/build.gradle b/node_modules/nodejs-mobile-react-native/android/build.gradle
index d572527..bd9f3c4 100644
--- a/node_modules/nodejs-mobile-react-native/android/build.gradle
+++ b/node_modules/nodejs-mobile-react-native/android/build.gradle
@@ -68,7 +68,8 @@ android {
             }
         }
         ndk {
-            abiFilters = project(":app").android.defaultConfig.ndk.abiFilters
+            // https://github.com/nodejs-mobile/nodejs-mobile-react-native/commit/f1ed0a95563303482d91d4e10e15d32d65c8eec5#diff-197b190e4a3512994d2cebed8aff5479ff88e136b8cc7a4b148ec9c3945bd65a
+            abiFilters = project(":app").android.defaultConfig.ndk.abiFilters ?: ["armeabi-v7a", "x86_64", "arm64-v8a"]
         }
     }
 
@@ -238,9 +239,10 @@ if ("1".equals(shouldRebuildNativeModules)) {
     GenerateNodeProjectAssetsLists.dependsOn "ApplyPatchScriptToModules"
 
     def nativeModulesABIs = android.defaultConfig.ndk.abiFilters;
-    if (nativeModulesABIs == null) {
+    if (!nativeModulesABIs) {
         // No abiFilter is defined for the build. Build native modules for eevery architecture.
-        nativeModulesABIs = ["armeabi-v7a", "x86", "arm64-v8a", "x86_64"] as Set<String>;
+        // Omitting "x86" because nodejs-mobile v16.17.X does not support it for now: https://github.com/nodejs-mobile/nodejs-mobile/blob/main/doc_mobile/CHANGELOG.md#2023-01-26-version-16170
+        nativeModulesABIs = ["armeabi-v7a", "arm64-v8a", "x86_64"] as Set<String>;
     }
 
     nativeModulesABIs.each { abi_name ->
@@ -365,47 +367,47 @@ if ("1".equals(shouldRebuildNativeModules)) {
             }
         }
 
-        task "DeleteIncorrectPrebuilds${abi_name}" (type:Delete) {
-            dependsOn "CopyNodeProjectAssets${abi_name}"
-            description = "Delete all .node files except the prebuilt ones for ${abi_name}."
-
-            delete fileTree(dir: "${rootProject.buildDir}/nodejs-native-assets-temp-build/nodejs-native-assets-${abi_name}/nodejs-project/node_modules/").matching {
-                include "**/*.node" // Look for all .node files
-                exclude "**/prebuilds/android-${temp_arch}/*" // Don't touch the correct prebuilds
-            }
-        }
-
-        task "DetectCorrectPrebuilds${abi_name}" {
-            dependsOn "DeleteIncorrectPrebuilds${abi_name}"
-            description = "Handle npm packages that have a correct prebuild for ${abi_name}."
-            inputs.file "${rootProject.buildDir}/nodejs-native-assets-temp-build/nodejs-native-assets-${abi_name}/copy.timestamp"
-            outputs.dir "${rootProject.buildDir}/nodejs-native-assets-temp-build/nodejs-native-assets-${abi_name}/nodejs-project/"
-
-            doLast {
-                def correctDotNodes = fileTree(dir: "${rootProject.buildDir}/nodejs-native-assets-temp-build/nodejs-native-assets-${abi_name}/nodejs-project/node_modules/").matching {
-                    include "**/prebuilds/android-${temp_arch}/*.node"
-                }
-                for (dotNode in correctDotNodes) {
-                    def moduleRoot = file("${dotNode.getAbsoluteFile()}/../../..")
-                    def moduleName = moduleRoot.getName()
-                    println "Preparing to use the prebuild in ${moduleName}"
-                    delete "${moduleRoot}/build"
-                    copy {
-                        from "${dotNode.getAbsoluteFile()}"
-                        into "${moduleRoot}/build/Release/"
-                    }
-                    exec {
-                        workingDir moduleRoot
-                        commandLine 'sed', '-i.bak', 's/"install"/"dontinstall"/g; s/"rebuild"/"dontrebuild"/g; s/"gypfile"/"dontgypfile"/g', 'package.json'
-                    }
-                    delete "${moduleRoot}/binding.gyp"
-                    delete "${moduleRoot}/prebuilds"
-                }
-            }
-        }
+        // task "DeleteIncorrectPrebuilds${abi_name}" (type:Delete) {
+        //     dependsOn "CopyNodeProjectAssets${abi_name}"
+        //     description = "Delete all .node files except the prebuilt ones for ${abi_name}."
+
+        //     delete fileTree(dir: "${rootProject.buildDir}/nodejs-native-assets-temp-build/nodejs-native-assets-${abi_name}/nodejs-project/node_modules/").matching {
+        //         include "**/*.node" // Look for all .node files
+        //         exclude "**/prebuilds/android-${temp_arch}/*" // Don't touch the correct prebuilds
+        //     }
+        // }
+
+        // task "DetectCorrectPrebuilds${abi_name}" {
+        //     dependsOn "DeleteIncorrectPrebuilds${abi_name}"
+        //     description = "Handle npm packages that have a correct prebuild for ${abi_name}."
+        //     inputs.file "${rootProject.buildDir}/nodejs-native-assets-temp-build/nodejs-native-assets-${abi_name}/copy.timestamp"
+        //     outputs.dir "${rootProject.buildDir}/nodejs-native-assets-temp-build/nodejs-native-assets-${abi_name}/nodejs-project/"
+
+        //     doLast {
+        //         def correctDotNodes = fileTree(dir: "${rootProject.buildDir}/nodejs-native-assets-temp-build/nodejs-native-assets-${abi_name}/nodejs-project/node_modules/").matching {
+        //             include "**/prebuilds/android-${temp_arch}/*.node"
+        //         }
+        //         for (dotNode in correctDotNodes) {
+        //             def moduleRoot = file("${dotNode.getAbsoluteFile()}/../../..")
+        //             def moduleName = moduleRoot.getName()
+        //             println "Preparing to use the prebuild in ${moduleName}"
+        //             delete "${moduleRoot}/build"
+        //             copy {
+        //                 from "${dotNode.getAbsoluteFile()}"
+        //                 into "${moduleRoot}/build/Release/"
+        //             }
+        //             exec {
+        //                 workingDir moduleRoot
+        //                 commandLine 'sed', '-i.bak', 's/"install"/"dontinstall"/g; s/"rebuild"/"dontrebuild"/g; s/"gypfile"/"dontgypfile"/g', 'package.json'
+        //             }
+        //             delete "${moduleRoot}/binding.gyp"
+        //             delete "${moduleRoot}/prebuilds"
+        //         }
+        //     }
+        // }
 
         task "BuildNpmModules${abi_name}" (type:Exec) {
-            dependsOn "DetectCorrectPrebuilds${abi_name}"
+            dependsOn "CopyNodeProjectAssets${abi_name}"
             description = "Building native modules for ${abi_name}."
             def nodeVersionStdout = new ByteArrayOutputStream()
             def nodeVersionResult = exec {
diff --git a/node_modules/nodejs-mobile-react-native/android/src/main/java/com/janeasystems/rn_nodejs_mobile/RNNodeJsMobileModule.java b/node_modules/nodejs-mobile-react-native/android/src/main/java/com/janeasystems/rn_nodejs_mobile/RNNodeJsMobileModule.java
index 337de9b..86000ba 100644
--- a/node_modules/nodejs-mobile-react-native/android/src/main/java/com/janeasystems/rn_nodejs_mobile/RNNodeJsMobileModule.java
+++ b/node_modules/nodejs-mobile-react-native/android/src/main/java/com/janeasystems/rn_nodejs_mobile/RNNodeJsMobileModule.java
@@ -32,6 +32,7 @@ public class RNNodeJsMobileModule extends ReactContextBaseJavaModule implements
   private final ReactApplicationContext reactContext;
   private static final String TAG = "NODEJS-RN";
   private static final String NODEJS_PROJECT_DIR = "nodejs-project";
+  private static final String NODEJS_ASSETS_DIR = "nodejs-assets";
   private static final String NODEJS_BUILTIN_MODULES = "nodejs-builtin_modules";
   private static final String TRASH_DIR = "nodejs-project-trash";
   private static final String SHARED_PREFS = "NODEJS_MOBILE_PREFS";
@@ -42,6 +43,7 @@ public class RNNodeJsMobileModule extends ReactContextBaseJavaModule implements
   private static String trashDirPath;
   private static String filesDirPath;
   private static String nodeJsProjectPath;
+  private static String nodeJsAssetsPath;
   private static String builtinModulesPath;
   private static String nativeAssetsPath;
 
@@ -74,6 +76,7 @@ public class RNNodeJsMobileModule extends ReactContextBaseJavaModule implements
 
     // The paths where we expect the node project assets to be at runtime.
     nodeJsProjectPath = filesDirPath + "/" + NODEJS_PROJECT_DIR;
+    nodeJsAssetsPath = filesDirPath + "/" + NODEJS_ASSETS_DIR;
     builtinModulesPath = filesDirPath + "/" + NODEJS_BUILTIN_MODULES;
     trashDirPath = filesDirPath + "/" + TRASH_DIR;
     nativeAssetsPath = BUILTIN_NATIVE_ASSETS_PREFIX + getCurrentABIName();
@@ -424,6 +427,9 @@ public class RNNodeJsMobileModule extends ReactContextBaseJavaModule implements
     // Copy the nodejs built-in modules to the application's data path.
     copyAssetFolder("builtin_modules", builtinModulesPath);
 
+    // Copy nodejs assets (e.g. presets) which can vary between variants
+    copyAssetFolder("nodejs-assets", nodeJsAssetsPath);
+
     saveLastUpdateTime();
     Log.d(TAG, "Node assets copy completed successfully");
   }
